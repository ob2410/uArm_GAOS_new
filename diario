10/8

Stiamo facendo la SYS3 e ci viene richiesto di vedere di quante risorse ha bisogno
il primo processo bloccato, quindi noi abbiamo messo un campo
in più nel pcb per salvare quante risorse chiede.
Quando liberiamo risorse (weight > 0) usiamo la headBlocked per avere il
puntatore al primo processo bloccato sul semaforo, controlliamo se le risorse
richieste da questo processo sono meno o uguali a quelle che abbiamo appena
liberato e, se questo è il caso, lo sblocchiamo {abbiamo tolto il cast che
avevano fatto quelli dell'anno scorso, nel caso non funziona rimettiamolo}


Per la sys3 usiamo la variabile/parametro currentProcess, questo ovviamente
identifica il processo corrente che è stato inizializzato con la sys1 che è
la createProcess. Quindi ora ci mettiamo a fare la sys1 (Olga vai a vedere la
STST tra la documentaione di uArm)



11/8

Stiamo facendo la createProcess e dopo un lungo dibattito abbiamo deciso di
fare il pid uguale a come lo hanno fatto gli altri, però a Olga non piace
tanto questa idea.... Stiamo sempre a cambiare i cast da U32 a unsignd int
se poi non funziona li ricambiamo. Notare che la SYSCALL ci mette per bene
(si spera) lo stato del processore al momento attuale nel registro a2, che
poi noi mettiamo in argv1 per usarlo nella nostra createProcess

Vogliamo iniziare a fare il test quindi faccimo anche la SYS2
(TerminateProcess). Nelle specifiche dice di terminare il processo chiamante
quando la syscall è chiamata con parametro 0, che succede però se la
chiamo con il mio stesso pid? Da errore? Funziona lo stesso?
Qui i tipi fanno una cosa dello pseudoclock... noi ancora non vediamo niente
di sta roba quindi lo abbiamo commentato.
Non sappiamo bene se riutilizzando funzioni già fatte in exceptions.c
le dobbiamo chaimare come SYSCALL o come una semplice funzione.
Quando dobbiamo uccidere un processo, dobiamo toglierlo dalla lista dei figli
dei suoi genitori. Cosa succede se il processo non ha genitori?
Il caso corretto di un processo senza genitore è quando il processo è
il primo processo creato (nel nostro caso il primo processo è il test),
e dal test vediamo che per terminare correttamente il primo processo
va sollevata una trap e non va usata la syscall terminateProcess, quidni
va bene usare come caso di errore il fatto che la outChild dia NULL.

Abbiamo provato a modificare velocemente il MakeFile perché volevamo
iniziare un po a testarlo ma non avevamo ancora visto la scheduler quindi
dobbiamo vedre prima lo scheduler e poi si può iniziare

17/8

Stiamo facendo lo scheduler, per ora diamouna passata veloce ma potremmo
gestire i deadlock in modo diverso.

Sara ha trovato un progetto dell'anno scorso che ha più snso di quello che
facevamo prima, quindi ora copiamo da loro. Per ora l'idea che abbiamo preso
è che se il current process != NULL noi lo mettiamo nella ready queue
e poi mettiamo current process = NULL questo perché è lo scheduler che deve
decidere se il processo che abbiamo ora è quello che dobbiamo eseguire, o ce
ne è un altro che ha più diritto di lui a essere eseguito

Siamo arrivate alla conclusione che Olga aveva ragione a non fidarsi di quelli
da cui copiavamo prima u.u

19/8
SCHEDULER

Lo scheduler che avevamo fatto insieme alla fine richiamava lo scheduler, ma
secondo me non ha senso, lo scheduler va chiamato solo quando serve.

Un processo viene messo nella coda ready quando:
1- è appena stato creato e vuole iniziare il suo lavoro
2- c'è stato un interrupt (quando finisci di gestire l'interrupt vai rimesso
   ready
3- Ho finito operazione i/o

Quindi basta assicurarsi che ognuna di queste operazioni metta il current
process nella coda ready e poi metta a null il processo corrente. Se
lo scheduler è stato chiamato alla fine di una systemcall o qualsiasi
altra operazione non bloccante allora il current process non sarà diverso
da null e se quindi il timeslice non è ancora finito allora quel processo
deve continuare a fare le sue cose, sennò se ne occuperà l'interrupt del
timeslice (quello mandato dall'intervall timer) che metterà il processo in
ready e current process a null per poi richiamare lo scheduler.

Lo scheduler per prima cosa quidni vede se è finito il timeslise del
processo, se non è finito ma entro con un currentProces==NULL (questo
vuol dire che voglio prendere un nuovo processo dalla coda ready) allora
devo settare un nuovo timeslice, se non era finito ma ho un processo
che non aveva ragione di essere bloccto, metto l'interval timer alla
fine del suo time slice (o pseudo clokck).


AGGIUSTAMENTI

Mi sono letta queste cose (http://stackoverflow.com/questions/1433204/how-do-i-use-extern-to-share-variables-between-source-files-in-c)
che ti spiegano bene come usre le variabili globali quando hai tanti
moduli, quindi ora sto mettendo le cose a posto seguendo la logica spiegata
lì, perciò ho fatto un initial.h. Ora cerco di mettere ordine nell'initial.c
per renderlo più coerente allo scheduler appena finito

SYSTEMCALL

Sto rivedendo le system call e ho trovato dei problemi nella createProcess.
In primis, noi inizializziamo il processo con lo stato corrente del
processore, ma questo è sbagliato, dovremmo inizializzarlo con il parametro
passato come argomento, correggo facendo una funzione (definita in initial)
che copia uno stato in un altro stato. (Mi sembra strano che non ci sia in uArm... RIGUARDARE)
Devo vedermi un po' l'aritmetica dei puntatori perché proprio non capisco
quando devo mettere e quando non mettere la &, è troppo complicato
il lavoro per provare e sperare di aver fatto bene
Io di solito penso in questo modo:
&var ritorna l'indirizzo di memoria in cui è salvata var.
Se var è un puntatore:
- se vogliamo far riferimento all'indirizzo della cella di memoria a cui punta var,
  basterà usare var così com'è
- se vogliamo far riferimento al contenuto della cella a cui var punta,
  bisogna usare *var (* operazione di dereferenziazione)
Se var è una variabile è la stessa cosa se ci pensi:
usare var da solo è come usare il contenuto di var, &var è l'indirizzo a cui è salvato il contenuto
i puntatori sono solo un caso particolare in cui il contenuto della variabile è un indirizzo

ASSEGNARE IL PID

Ok, non capisco niente di come stiamo facendo i pid, quindi ho pensato di fare
così:
 Abbiamo l'array dei pcb attivi (active_pcb) e il pid del processo è il
primo indice libero in quell'array. Poi salvo nella struttura dei pcb il
pid, così se ho il pcb per recuperare il pid basta andare al campo dove
salvi il pid, se ho il pid basta andare un active_pcb[pid] per trovare
il pcb
(possiamo provare un algoritmo un po' più complicato ma per ora a me piace
questo)
------------- 21/08 ------------------
    (Ci avevamo pensato anche quando eravamo insieme e il problema era che ogni volta che
    assegni un nuovo pid devi scorrere tutto l'array per trovare una pos libera,
    comunque anche per me si può lasciare così e cambiare in seguito)
--------------------------------------

Ho fatto nelle exceptions.c una funzione (newPid) che calcola il nuovo
pid e salva il processo nei processi attivi salvando il pid nel campo
giusto, anche qui non so se con i puntatori ho fatto bene.

------------- 21/08 ------------------
    if (i >= MAXPROC) //ci sono più pricessi di quanti ne posso avere
        PANIC();
    Teoricamente non serve perchè se non ci fosse abbastanza spazio l'allocPcb
    Avrebbe restituito NULL, però lo lascio     RIGUARDARE
--------------------------------------

Ho scoperto che ci stava un types definito dal prof che non avevamo
ancora scaricato o visto dove nel pcb c'è lo spazio per il pid (-.-'')

Nella terminate se passo 0 vuol dire che è il processo chiamante a uccidersi,
e visto che il parametro è in teoria il pid del processo non posso usare 0
come pid di nessun processo, quindi il pid dei processi saranno la
loro posizione nell'array+1, quindi ricordati di fare pid-1 quando
vuoi accedere al pcd dal pid


REVISIONE TERMINATE PROCESS

Sono andata a vedere nel pdf di fase due che ti dice di aggiustare il semforo
se era negativo, MA dice di non aggiustarlo se il semaforo è un semaforo
di device...ora, non capisco... i semaphori non si riferiscono solo ai
device? Cosa mi sfugge?
Ok, penso che volendo puoi usare semafori che non siano utilizzati per i
device, ma : come faccio a capire se sono bloccato su un semaforo di
device o qualunque altro semaforo?

Ok, ho capito, non lo faccio ora perché devo uscire con mia cugina ma, pensavo
che per vedere se un processo è bloccato su un device devo controllare
se è bloccato in ognuno degli array dei semafori dei device, quidni
pensavo di fare un array bidimensionale per i device così è più facile
accedervi nel programma così che poi l'indice nell'array corrisponde alla
linea dell'interrupt (leggiti bene come funzionano queste cose e
aggiusta di conseguenza).
Altra cosa che vorrei poter fare è salvarmi quante risorse ho chiesto non
nel pcb, perché ora che ho trovato il pcb dove era già messo il pid
sono non mi piace aggiungere cose al pcb

20/8

SEMAFORI

Per i device abbiamo che ci possiamo accedere specificando la linea
dell'interrupt a cui è collegato e a quale specifico device facciamo
riferimento, quindi per quello che capisco ha senso fare un array di due
dimensioni dove la prima dimensione indica la linea di interrupt (e per
questo la grandezza è DEV_USED_INTS) e la seconda il device (e quidni di
dimensione DEV_PER_INT). Ho fatto il +1 nella prima dimensione dell'array
perché in teoria il terminal è visto come due diversi device anche se
ancora non capisco bene come funziona questa cosa. Bisogna ricordarsi, però
che (in teoria) con la line 3 tu vuoi accedere all'array con indice 0 (il
semaforo del clock vuole la linea 2), quidni quando fai la sys10 vedi di
ricordarti sta cosa.

TERMINATE PROCESS

Ho fatto una funzione per vedere se il semaforo è bloccato sul semaforo di
device. L'ho fatta diventare void perché nelle nostre specifiche non dice
di restituire niente e quindi io non restituisco

SYS3

Con sara ci chiedevamo dove vedere quante risorse voleva un processo e
quindi li avevamo messi nei pcb, questa cosa non mi piace, per ora la lascio
così ma pensavo di fare un semplice array dove salvarlo (indicizzato con i pid
quindi dal pid del processo posso subito recuperare da quell'array quante
risorse vuole)
Questa non l'ho modificata, bisogna vedere se funziona con il test, se non
funziona ci pensiamo lì


SYSHANDLER

Sto rivedendo l'intero hendler e noi avevamo fatto questa cosa strana
mode= ((sysBp_old->cpsr & STATUS_SYS_MODE) >> 0x3);
per vedere in che mode eravamo ma secondo me è sbagliato, secondo me
basta fare & con la maschera impostata dalle costanti di davoli (che ho
quello che ho fatto, poi vediamo facendo il test).
Ok, più volte nelle specifiche ci dice di lavorare con lo user time e cpu
time, ma non abiamo dove metterlo... (me ne sono accorta solo ora), dobbiamo
aggiungere un altro campo nel pcb?
Ok, voglio sapere come funziona la syscall perché non capisco: posiziona
le cose nella old area e noi le dobbiamo recuperare da lì? dove sta scritto?
Ho trovato questo scritto nel manuale di uarm:
"Each time an exception is risen, the BIOS handlers will store the processor
state before the exception into the proper Old area, perform other tasks where
required (see sec. 2.5.2) and eventually load the processor state stored
in the corresponding New area. The New areas must be filled with valid
processor states pointing to kernel level exception handlers by kernel
initialization stage."
Forse è utile.
Ho messo cosa fare nel caso si sia in user mode.
Volevo fare anche l caso breakpoint ma centrava con la sys4, quindi provo
a fare prima quella e poi torno a fare l'handler


SYS4

(ATTENZIONE! : qualsiasi modifica o errore trovato in questa funzione sarà
anche nelle sys5 e sys6 perché ho fatto copia incolla e fanno praticmamente
la stessa cosa)

Non capisco quasi niente dalle specifiche. Ora cerco di popolare al newArea
che mi dice lui nel modo che mi dice lui. Quanto mi da sui nervi che dice
"il kernel fa questo" "il nucleo fa quello", che vuol dire?!?!? Io che devo
fare quando implemento la syscall?!?!? TT__TT
Questa è anche diversa da quelli di l'anno scorso quidni mi devo arrangiare.

Ok, di questa ho scritto praticamente tutto quello che ho fatto nel codice.
Sono stanca, per oggi basta (anche se le prossime due syscall dovrebbero
essere praticmente uguali a questa)

21/08


Ho letto quel file di stack overflow e ho visto le tue modifiche a riguardo, però
non hai toccato le cose di phase1, secondo me dovremmo mettere extern anche nelle
dichiarazioni di quegli header sennò non siamo coerenti.
------------------------------------
	Si hai ragione, dovremmo aggiustare anche lì, ci avevo pensato ma ero troppo
	stanca per farlo, dobbiamo correggerlo prima o poi u.u
-----------------------------------

Ho aggiunto commenti in mezzo ai tuoi appunti degli altri giorni, preferisci che
io scriva sempre in fondo? comunque li ho messi tra righe di trattini così sono
riconoscibili. Inoltre le cose su cui non ero sicura le ho affiancate da
"RIGUARDARE" in modo che possiamo fare Ctrl+F e pensarci un attimo.
--------------------------------------------
	mi piace la cosa dei trattini, e alla fine se facciamo che lavoriamo in questo modo
	e quidni ogni volto devo rileggere solo gli appunti di un giorno la cosa è
	comodissima :)
------------------------------------------
Secondo me l'idea del campo nel pcb con il numero di risorse richieste era una
buona idea anche se non mi piace che non ci sia in quello di davoli (anche se è
probabile che non l'abbia messo solo perchè non voleva aiutarci troppo o perchè
voleva farci pensare ai possibili modi di risolvere la cosa). Mi è venuto un dubbio:
un processo può star fermo su più semafori? no, vero? perchè in quel caso il counter
nel pcb sarebbe sbagliato.
-----------------------------------
	Abbiamo solo un campo cursem quidni ti puoi bloccare su un solo semaforo
	alla volta
--------------------------------
Più ci penso e più mi convinco che un campo nel pcb sia la cosa migliore, in ogni
caso dobbiamo sapere quante risorse richiedeva il pcb e avere una struttura ausiliaria
ci costerebbe di più perchè dovremmo fare più accessi. L'unica alternativa plausibile
sarebbe fare un campo aggiuntivo nel semaforo, però secondo me ha più senso nel pcb.
-------------------------------
	anche per me ha più sneso nel pcb ma forse riusciamo a pensare a qualche altra
	soluzione
-------------------------------

exception.c
    Per quanto riguarda la chiamata a copyState secondo me va bene come hai messo &.
    A volte i pid erano rimasti definiti int, ho cambiato in pid_t.
    Nell'handler delle sys non ho capito bene cosa fai in usermode, però dal pdf
    di phase2 non ho capito neanche bene cosa deve fare il pgmTrap handler e ho
    visto che lo chiami...
---------------------------------
	praticamete un programma utente piò usare le syscall (ne abbiamo fatti
	tanti noi di es in c usando le systemcall) però essendo comunque istruzioni
	che si devono fare in kernel mode quando un programma in user mode usa una syscall
	si gnera una trap (interrupt generata dal programma) e la chiamta viene
	passata quidni al gestore dei trap (che dobbiamo scrivere più avanti). In
	teoria le copie delle oldarea varie che ho fatto servono appunto per fare
	il passaggio della syscall, perché mi pare di aver capito che quando
	chiami le syscall salvi le cose nella sysbp_oldArea mentre quando gestisci
	le trap le cose vanno messe dei pgmTrap_oldArea
---------------------------------

    createProcess
    chiamavi newPid con lo stato del processore, ho modificato e
    ho messo come parametro il nuovo pcb

    terminateProcess
    termina il processo senza controllare che sia nella progenie del chiamante RIGUARDARE
    possibili soluzioni:
        1.scorrere il sottoalbero del currentProcess per vedere se il pid passato
        per parametro è di uno dei suoi figli/nipoti
	------------------------------
		cosa cambia se il pid passato è di uno dei figli del currentProcess?
		la funzione comunque lo elimina correttamente quindi non vedo il problema
	------------------------------
        2.fare in modo che un processo "veda" solo i pid del suo sottoalbero, ma come?
    Ho controllato e quelli dell'anno scorso non lo fanno sto controllo. Uffa.
	---------------------------------
		questo dovrebbe servire per assicurarsi che il processo che chiama
		la terminate non voglia terminare un processo di cui il
		currentProcess è discendente?
		Però non sarebbe un problema, nel caso si uccida il currentProcess
		perché era figlio del processo che inizialmente il currentProcess
		doveva uccidere, la funione funziona correttamente
	---------------------------------

    ho cambiato un po' i controlli per vedere se si tratta di suicidio in modo che
    il pid venga modificato solo se gli passiamo 0 come parametro, però il tutto
    è poco leggibile quindi vedi tu che versione tenere, quella vecchia sta lì
    commentata.
-----------------------------------
	a me sembra abbastanza leggibile, alla fine è solo un controllo in più,
	quindi per me si può lasciare così
------------------------------------
 Per vedere se è bloccato su un sem di Device quelli dell'anno
    scorso hanno fatto una funzione che sembra carina ma usa devSem che non so dove
    sia definita RIGUARDARE. Ah, ho appena visto che l'hai messa anche tu in exeptions.
    Ho cominciato a scrivere una funzione walk, per scorrere il sottoalbero di un
    processo, forse ce l'ho fatta, riguarda anche tu quando hai tempo, non è una
    cosa urgente. Ci ho messo un sacco perchè ho dovuto riguardare come funzionavano
    le cose di phase0 e come le avevamo usate nella phase1, però credo di esserci
    riuscita.
--------------------------------------
	perché dovrebbe servire?
---------------------------------------

********||Parte di Olga||************

L'hai gardata un po' la sys4? Io vado avanti con le altre poi aggiornami se trovi qualcosa
che non ti torna su quella u.u

SYS5/SYS6

Queste sono praticamente uguali alla sys4 quindi tutte i dubbi su di quella rimangono
anche qui, io però faccio copia e incolla e modifico solo le cose che devo modificare
quidni se scopriamo che la sys4 è sbagliata lo saranno anche queste due

SYS7

Allora dice che l'oldArea del Pcb (che suppongo deva essere recuperata dall'array che
ho usato anche per le SYS4-5-6) deve essere caricato, ora, dove deve essere caricato?
Io lo carico sia sia in p_s del pcb corrente che nel processore vero e proprio e commento
quello del pcb perché nelle specifiche dice che solo il nucleo conosce i pcb.
L'ho fatta troppo subito, secondo me c'è qualcosa che non ho capito u.u

SYS8

Ecco che iniziamo con lo user Time e company, quidni penso prorpio che va messo nel pcb,
vado a modificare le strutture, spero di non dimenticarmene qualcuna (p.s. abbiamo due
types.h: una è quella nostra e una e quella del prof, io le modifico entrambe).
Ora, noi facciamo iniziare lo userTime e il cpuTime nello scheduler quando si sceglie il
processo a cui tocca partire (usiamo una variabile ce si prende lo start time di entrambi),
quidni quando al processo si toglie la cpu dobbiamo aggiornare il valore. Per il tempo in
user mode, questo finisce anche quando faccio una systemcall (che è fatta ovviamente in
kernel mode) quindi all'inizio l'handler si occupa di settare bene il tempo utente, mentre
l'intervallo per la cpu va aggiornato quando al processo viene tolto il controllo,
e questo succede quando avviene qualche interrupt quidni per aggiornare quel valore ci
pensa l'handler degli interrupt ad aggiornarlo per bene e quindi a quello ci penserò
quando farò l'handler degli interrupt. Per ora per restituire il globalTime che
vuole questa funzione basta prendere il tempo di ora e il tempo salvato in
currentProcess->p_CPUtime e calcolare l'intervallo.
Una cosa: tu processo, quando finisci il tuo timeslice esci dal processore, ma il tempo
che passi nel processore va considerato come quello totale che passi nella cpu (quindi
la somma di tutti i time slice) o solo il tempo che hai occupato continuamente la cpu?


SYS9

Dobbiamo bloccare il processo che chiama nel semaforo del clock, quidni uso la insertBlocked
con come indirizzo l'indirizzo del semaforo dello pseudoClock. Visto che è comunque
un semaforo e io mi sto bloccando sul semaforo faccio anche una -1 sul semaforo, ma non so
se la devo effettivamente fare...io lo faccio u.u
Poi dice che le cose su questo semaforo vengono sbloccate automaticamente dal nucleo ogni
100 millisecondi....ora, questo lo gestiremo con gli interrupt? oppure dobbiamo farci un
altra cosa che ogni 100 millisecondi ha il solo scopo di sbloccare i processi nel semaforo
dello pseudo clock? Per ora non lo so, secondo me ci vuole un interrupt però non so bene
come gestirlo. Però tanto gli costava mettere due timer così uno lo usavi per il time
slice e uno per i 100 millisecondi? bah, forse bisognerà ritornare su questo e vedere
se nel modo in cui abbiamo fatto lo scheduler ti assicura che ci sia un interrupt ogni 100
millisecondi

SEMAPHOREOPERATIONS

Una cosa che non mi torna è perché per sbloccare il processo non controlliamo il
nuovo valore del semaforo invece di vedere il peso, mi ricordo che ne avevamo discusso, per
ora ho messo un || ma secondo me si potrebbe controllare direttamente il semaforo
eliminando completamente il peso, però ricordo che centrava qualcosa con le specifiche.
Però se controlliamo solo il peso potremmo avere questa situazione: ho un processo bloccato
che vuole 3 risorse. Il semaforo è a -3. Arriva un processo che libera 2 risorse
quindi 2<3 non possiamo liberare il processo bloccato, il semaforo diventa -1. Arriva un
altro processo che libera 1 risorsa e quindi il semaforo è 0 e quindi potrei poter liberare
il primo processo in coda ma per come lo abbiamo fatto noi visto che 1<3 non lo possiamo
liberare. Ancora mi è sorta una domanda: noi inizializziamo i semafori a 0 quidni quando
prendo risorse la prima volto io posso fare anche -100, va bene? Questo in realtà penso
che dipende perché per l'i/o mi dicono le specifiche ne posso chiedere solo una alla volta
quidni magari gli altri semafori funzionano diversamente. E quindi qui mi sale un altro
dubbio: se voglio 3 risorse le posso prendere anche se il semaforo è 0 o devo aspettare
che il semaforo si 3? Sono confusa.

Altra nota: per come abbiamo fatto noi la funzione abbiamo che le risorse le assegnamo
tutte insieme, ovvero se il processo chiede 5 risorse ma ce ne sono solo 3 libere lui
si blocca. Non credo sia sbagliato ma dobbiamo sapere che succede

Sono andata a aggiustare il timer, perché se ci blocchiamo su un semaforo non sto usando
più la cpu quidni devo aggiornare il cputimer

Ho trovato questo nella mailing list. Secondo me, per come lo abbiamo fatto noi il
problema non si pone, secondo te?

	2. Nel paragrafo 3.7.4 "Process Termination" della documentazione di fase 2, c'e' scritto:
		"If the value of a semaphore is negative, it means that some processes (of
		wich the ProcBlks are blocked on that semaphore) have requestes a number
		of resources. Hence if a terminated process is blocked on a semaphore,
		the value of the semaphore must be adjusted. "

	In questo caso, oltre a sistemare il valore del semaforo è anche necessario risvegliare (eventualmente) i processi bloccati su di esso richiamando una semaphore operation?

	2. dipende, se il processo aveva gia` ottenuto un quantitativo di risorse
	sufficienti a sbloccare il successivo allora ha senso che questo venga sbloccato,
	ma se si termina un processo a meta` della coda di attesa di un semaforo,
	questo non ha ancora certamente ricevuto nessuna risorsa, quindi bisogna soltanto
	sistemare il valore dell'intero relativo al semaforo.

Ora mi è venuto un dubbio sulla terminate: se terminiamo un processo mentre sta lavorando
con risorse di un semaforo, dovremmo liberare quelle risorse, come facciamo? Forse ci
pensa la sys10, ora vedo u.u


-----------------------------------------------------------------------------
Domande:
- come si comporta la var pseudoClock? Ho visto che la dichiarazione sta in initial
e poi la modifichiamo nello scheduler, però non mi è chiaro

---------------------------------
lo pseudoClock è un semaforo, si comporta come i semafori normali
----------------------------------

- per quanto riguarda i device ho trovato cose interessanti su const.h
        // interrupt handling related constants

        #define CAUSE_IP_MASK          0xff000000
        #define CAUSE_IP(line)         (1U << (24 + (line)))
        #define CAUSE_IP_BIT(line)     (24 + (line))

        // device starting interrupt line
        #define DEVINTBASE	3

        // device register length
        #define DEVREGLEN 	4

        // interrupts available for registers
        #define DEVINTUSED 	5

        // devices per interrupt line
        #define DEVPERINT	8

        // device type codes
        #define NULLDEV	0
        #define DISKDEV	1
        #define TAPEDEV	2
        #define ETHDEV 3
        #define PRNTDEV 4
        #define TERMDEV 5

        // interrupt line offset used for terminals
        // (lots of code must be modified if this changes)

        #define TERMINT	4

        // returns the sign bit of a word ------> questa roba non so se ci serve e non ho capito cosa sia
        #define SIGNBIT(w) (w & SIGNMASK)

- e anche su arch.h
        /* Devices per interrupt line */
        #define N_DEV_PER_IL        8

        #define DEV_IL_START        (N_INTERRUPT_LINES - N_EXT_IL)

        #define IL_IPI              0
        #define IL_CPUTIMER         1
        #define IL_TIMER            2
        #define IL_DISK             3
        #define IL_TAPE             4
        #define IL_ETHERNET         5
        #define IL_PRINTER          6
        #define IL_TERMINAL         7

        #define EXT_IL_INDEX(il)    ((il) - DEV_IL_START)

        #define INT_DEV_VECTOR(il)	(0x6FE0 + (EXT_IL_INDEX(il) * 4))

- perchè hai fatto quell'array dei devices? Ho letto i tuoi appunti dei 20/08
ma non capisco a che ci serve di preciso

- che significa linea di interrupt?


SYS10

Non ho capito niente, o meglio non trovo le cose, uff sono stanca, la vedo domani

SYS11

Semplice e intutitiva, nietne da dire

22/08

Nel test quando si creano i semafori sono dei semplici interi, diventano
delle vere e proepire strutture nel momento in cui faccio la insertBlocked
(vedi codice in asl)


SEMOP

Abbiamo risolto il dubbio del peso aggionrando le risorse di cui abbiamo
bisongo nel primo processo bloccato

SYS4/5/6

Per la cosa dei flag forese il flag è un intero e il flag[1] (ecc) delle
specifiche si riferisce a "primo bit del flag, secondo bit" (ecc).
Questo va messo in cpsr vedi se c'è quanlche funzione già fatta
per settare quel registro

SYS10

Per Sara: quello degli americani non ci sere perché è come quello dell'anno
scorso, c'è un flag, non c'è questa cosa strana nostra, quindi sono di nuovo
non sapendo che fare

Ok, con l'aiuto di Giacomo sono arrivata alla conclusione che non può far 
altro che con "bit più significativo" vuol dire che in a4 ci sarà scritto 
qualcosa del tipo 10000xxx oppure 00000xxx, quindi ho fatto questo:

if ( dnum & 0x10000000 ) {
		dev=N_EXT_IL+1;
		dnum= dnum & 0x10000000;
	}else{
		dev=intlNo-DEV_IL_START;
	}
 
che praticamente vede se il bit più significativo di dnum è a 1 allora
devo leggere dal terminale (e ho deciso che è l'ultimo nel nostro array
di semafori)e poi non so se posso fare  dnum= dnum & 0x10000111; ma 
praticamente visto che il dnum deve essere un numero da 0 a 7 se c'è l'uno
nel più significativo allora devo ambiarlo e farlo tornare a essere un 
numero da 0 a 7. L'else ci sta perchè il nostro array inizia da 0 e per come
sono le linee dell'interrrupt nei device noi usiamo solo da 3 a 7, quidi
il ramo else è fatto per aggiustare questa cosa

Ora dovrei andare a scrivere sui registri ma non  sino sicura che cada bene
come lo vado a fare ora (perché questa sys call ce l'ha fatta così 
complicata??? L'anno scorso era più semplice TT__TT)

Non so bene se con una read devo scrivere nel registro del recive o del 
transmit... penso recive perché per leggere qualcosa devo averla ricevuta

Ok, non so che altro fare e soprattutto come farlo, comunque questa 
dovrebbe essere fatta dopo aver uninterrupt (credo?), più ci sto e più
non la capisco. Ho deciso che è meglio andare avanti e lavorare con gli
interrupt così magari vediamo bene come funzionano quelli e poi tornarci
